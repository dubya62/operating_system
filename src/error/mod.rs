//! The purpose of this file is to allow graceful error handling
//! For now, the main usage will be to help debug other parts of the kernel
//! It will use Linux error codes
//!
//! It provides the following public functionality:
//!
//! struct Error {
//!     errno: i32
//! }
//!     new(errno: i32) -> Self - constructor
//!     perror(&self) -> () - print the string representation of an error number
//!     (NOT IMPLEMENTED YET): send_sig(&self, pid: i32) -> () - send a signal to a process based on the error number
//!

#[repr(i32)]
pub enum ErrorCodes {
    EPERM = 1,
    ENOENT,
    ESRCH,
    EINTR,
    EIO,
    ENXIO,
    E2BIG,
    ENOEXEC,
    EBADF,
    ECHILD,
    EAGAIN,
    ENOMEM,
    EACCES,
    EFAULT,
    ENOTBLK,
    EBUSY,
    EEXIST,
    EXDEV,
    ENODEV,
    ENOTDIR,
    EISDIR,
    EINVAL,
    ENFILE,
    EMFILE,
    ENOTTY,
    ETXTBSY,
    EFBIG,
    ENOSPC,
    ESPIPE,
    EROFS,
    EMLINK,
    EPIPE,
    EDOM,
    ERANGE,
    EDEADLK,
    ENAMETOOLONG,
    ENOLCK,
    ENOSYS,
    ENOTEMPTY,
    ELOOP,
    ENOMSG,
    EIDRM,
    ECHRNG,
    EL2NSYNC,
    EL3HLT,
    EL3RST,
    ELNRNG,
    EUNATCH,
    ENOCSI,
    EL2HLT,
    EBADE,
    EBADR,
    EXFULL,
    ENOANO,
    EBADRQC,
    EBADSLT,
    EBFONT,
    ENOSTR,
    ENODATA,
    ETIME,
    ENOSR,
    ENONET,
    ENOPKG,
    EREMOTE,
    ENOLINK,
    EADV,
    ESRMNT,
    ECOMM,
    EPROTO,
    EMULTIHOP,
    EDOTDOT,
    EBADMSG,
    EOVERFLOW,
    ENOTUNIQ,
    EBADFD,
    EREMCHG,
    ELIBACC,
    ELIBBAD,
    ELIBSCN,
    ELIBMAX,
    ELIBEXEC,
    EILSEQ,
    ERESTART,
    ESTRPIPE,
    EUSERS,
    ENOTSOCK,
    EDESTADDRREQ,
    EMSGSIZE,
    EPROTOTYPE,
    ENOPROTOOPT,
    EPROTONOSUPPORT,
    ESOCKTNOSUPPORT,
    EOPNOTSUPP,
    EPFNOSUPPORT,
    EAFNOSUPPORT,
    EADDRINUSE,
    EADDRNOTAVAIL,
    ENETDOWN,
    ENETUNREACH,
    ENETRESET,
    ECONNABORTED,
    ECONNRESET,
    ENOBUFS,
    EISCONN,
    ENOTCONN,
    ESHUTDOWN,
    ETOOMANYREFS,
    ETIMEDOUT,
    ECONNREFUSED,
    EHOSTDOWN,
    EHOSTUNREACH,
    EALREADY,
    EINPROGRESS,
    ESTALE,
    EUCLEAN,
    ENOTNAM,
    ENAVAIL,
    EISNAM,
    EREMOTEIO,
    EDQUOT,
    ENOMEDIUM,
    EMEDIUMTYPE,
    ECANCELED,
    ENOKEY,
    EKEYEXPIRED,
    EKEYREVOKED,
    EKEYREJECTED,
    EOWNERDEAD,
    ENOTRECOVERABLE,
    ERFKILL,
    EHWPOISON,
}

pub struct Error {
    pub errno: ErrorCodes, // error number of the error
}

impl Error {
    // constructor
    pub fn new(errno: ErrorCodes) -> Self {
        return Error { errno: errno };
    }

    pub fn perror(&self) {
        // print the string version of the error number
        println!(
            "{}",
            match self.errno {
                ErrorCodes::EPERM => "Operation not permitted",
                ErrorCodes::ENOENT => "No such file or directory",
                ErrorCodes::ESRCH => "No such process",
                ErrorCodes::EINTR => "Interrupted system call",
                ErrorCodes::EIO => "Input/output error",
                ErrorCodes::ENXIO => "No such device or address",
                ErrorCodes::E2BIG => "Argument list too long",
                ErrorCodes::ENOEXEC => "Exec format error",
                ErrorCodes::EBADF => "Bad file descriptor",
                ErrorCodes::ECHILD => "No child processes",
                ErrorCodes::EAGAIN => "Resource temporarily unavailable",
                ErrorCodes::ENOMEM => "Cannot allocate memory",
                ErrorCodes::EACCES => "Permission denied",
                ErrorCodes::EFAULT => "Bad address",
                ErrorCodes::ENOTBLK => "Block device required",
                ErrorCodes::EBUSY => "Device or resource busy",
                ErrorCodes::EEXIST => "File exists",
                ErrorCodes::EXDEV => "Invalid cross-device link",
                ErrorCodes::ENODEV => "No such device",
                ErrorCodes::ENOTDIR => "Not a directory",
                ErrorCodes::EISDIR => "Is a directory",
                ErrorCodes::EINVAL => "Invalid argument",
                ErrorCodes::ENFILE => "Too many open files in system",
                ErrorCodes::EMFILE => "Too many open files",
                ErrorCodes::ENOTTY => "Inappropriate ioctl for device",
                ErrorCodes::ETXTBSY => "Text file busy",
                ErrorCodes::EFBIG => "File too large",
                ErrorCodes::ENOSPC => "No space left on device",
                ErrorCodes::ESPIPE => "Illegal seek",
                ErrorCodes::EROFS => "Read-only file system",
                ErrorCodes::EMLINK => "Too many links",
                ErrorCodes::EPIPE => "Broken pipe",
                ErrorCodes::EDOM => "Numerical argument out of domain",
                ErrorCodes::ERANGE => "Numerical result out of range",
                ErrorCodes::EDEADLK => "Resource deadlock avoided",
                ErrorCodes::ENAMETOOLONG => "File name too long",
                ErrorCodes::ENOLCK => "No locks available",
                ErrorCodes::ENOSYS => "Function not implemented",
                ErrorCodes::ENOTEMPTY => "Directory not empty",
                ErrorCodes::ELOOP => "Too many levels of symbolic links",
                ErrorCodes::ENOMSG => "No message of desired type",
                ErrorCodes::EIDRM => "Identifier removed",
                ErrorCodes::ECHRNG => "Channel number out of range",
                ErrorCodes::EL2NSYNC => "Level 2 not synchronized",
                ErrorCodes::EL3HLT => "Level 3 halted",
                ErrorCodes::EL3RST => "Level 3 reset",
                ErrorCodes::ELNRNG => "Link number out of range",
                ErrorCodes::EUNATCH => "Protocol driver not attached",
                ErrorCodes::ENOCSI => "No CSI structure available",
                ErrorCodes::EL2HLT => "Level 2 halted",
                ErrorCodes::EBADE => "Invalid exchange",
                ErrorCodes::EBADR => "Invalid request descriptor",
                ErrorCodes::EXFULL => "Exchange full",
                ErrorCodes::ENOANO => "No anode",
                ErrorCodes::EBADRQC => "Invalid request code",
                ErrorCodes::EBADSLT => "Invalid slot",
                ErrorCodes::EBFONT => "Bad font file format",
                ErrorCodes::ENOSTR => "Device not a stream",
                ErrorCodes::ENODATA => "No data available",
                ErrorCodes::ETIME => "Timer expired",
                ErrorCodes::ENOSR => "Out of streams resources",
                ErrorCodes::ENONET => "Machine is not on the network",
                ErrorCodes::ENOPKG => "Package not installed",
                ErrorCodes::EREMOTE => "Object is remote",
                ErrorCodes::ENOLINK => "Link has been severed",
                ErrorCodes::EADV => "Advertise error",
                ErrorCodes::ESRMNT => "Srmount error",
                ErrorCodes::ECOMM => "Communication error on send",
                ErrorCodes::EPROTO => "Protocol error",
                ErrorCodes::EMULTIHOP => "Multihop attempted",
                ErrorCodes::EDOTDOT => "RFS specific error",
                ErrorCodes::EBADMSG => "Bad message",
                ErrorCodes::EOVERFLOW => "Value too large for defined data type",
                ErrorCodes::ENOTUNIQ => "Name not unique on network",
                ErrorCodes::EBADFD => "File descriptor in bad state",
                ErrorCodes::EREMCHG => "Remote address changed",
                ErrorCodes::ELIBACC => "Can not access a needed shared library",
                ErrorCodes::ELIBBAD => "Accessing a corrupted shared library",
                ErrorCodes::ELIBSCN => ".lib section in a.out corrupted",
                ErrorCodes::ELIBMAX => "Attempting to link in too many shared libraries",
                ErrorCodes::ELIBEXEC => "Cannot exec a shared library directly",
                ErrorCodes::EILSEQ => "Invalid or incomplete multibyte or wide character",
                ErrorCodes::ERESTART => "Interrupted system call should be restarted",
                ErrorCodes::ESTRPIPE => "Streams pipe error",
                ErrorCodes::EUSERS => "Too many users",
                ErrorCodes::ENOTSOCK => "Socket operation on non-socket",
                ErrorCodes::EDESTADDRREQ => "Destination address required",
                ErrorCodes::EMSGSIZE => "Message too long",
                ErrorCodes::EPROTOTYPE => "Protocol wrong type for socket",
                ErrorCodes::ENOPROTOOPT => "Protocol not available",
                ErrorCodes::EPROTONOSUPPORT => "Protocol not supported",
                ErrorCodes::ESOCKTNOSUPPORT => "Socket type not supported",
                ErrorCodes::EOPNOTSUPP => "Operation not supported",
                ErrorCodes::EPFNOSUPPORT => "Protocol family not supported",
                ErrorCodes::EAFNOSUPPORT => "Address family not supported by protocol",
                ErrorCodes::EADDRINUSE => "Address already in use",
                ErrorCodes::EADDRNOTAVAIL => "Cannot assign requested address",
                ErrorCodes::ENETDOWN => "Network is down",
                ErrorCodes::ENETUNREACH => "Network is unreachable",
                ErrorCodes::ENETRESET => "Network dropped connection on reset",
                ErrorCodes::ECONNABORTED => "Software caused connection abort",
                ErrorCodes::ECONNRESET => "Connection reset by peer",
                ErrorCodes::ENOBUFS => "No buffer space available",
                ErrorCodes::EISCONN => "Transport endpoint is already connected",
                ErrorCodes::ENOTCONN => "Transport endpoint is not connected",
                ErrorCodes::ESHUTDOWN => "Cannot send after transport endpoint shutdown",
                ErrorCodes::ETOOMANYREFS => "Too many references: cannot splice",
                ErrorCodes::ETIMEDOUT => "Connection timed out",
                ErrorCodes::ECONNREFUSED => "Connection refused",
                ErrorCodes::EHOSTDOWN => "Host is down",
                ErrorCodes::EHOSTUNREACH => "No route to host",
                ErrorCodes::EALREADY => "Operation already in progress",
                ErrorCodes::EINPROGRESS => "Operation now in progress",
                ErrorCodes::ESTALE => "Stale file handle",
                ErrorCodes::EUCLEAN => "Structure needs cleaning",
                ErrorCodes::ENOTNAM => "Not a XENIX named type file",
                ErrorCodes::ENAVAIL => "No XENIX semaphores available",
                ErrorCodes::EISNAM => "Is a named type file",
                ErrorCodes::EREMOTEIO => "Remote I/O error",
                ErrorCodes::EDQUOT => "Disk quota exceeded",
                ErrorCodes::ENOMEDIUM => "No medium found",
                ErrorCodes::EMEDIUMTYPE => "Wrong medium type",
                ErrorCodes::ECANCELED => "Operation canceled",
                ErrorCodes::ENOKEY => "Required key not available",
                ErrorCodes::EKEYEXPIRED => "Key has expired",
                ErrorCodes::EKEYREVOKED => "Key has been revoked",
                ErrorCodes::EKEYREJECTED => "Key was rejected by service",
                ErrorCodes::EOWNERDEAD => "Owner died",
                ErrorCodes::ENOTRECOVERABLE => "State not recoverable",
                ErrorCodes::ERFKILL => "Operation not possible due to RF-kill",
                ErrorCodes::EHWPOISON => "Memory page has hardware error",
            }
        );
    }

    // TODO: make this function send a signal to a process based
    // on the error number
    // pub fn send_sig(&self, pid: i32) {}
}
